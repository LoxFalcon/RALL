/* Generated By:JJTree&JavaCC: Do not edit this line. lexico.java */
package analizador;
import java.io.*;
import java.util.Scanner;
public class lexico/*@bgen(jjtree)*/implements lexicoTreeConstants, lexicoConstants {/*@bgen(jjtree)*/
  protected static JJTlexicoState jjtree = new JJTlexicoState();public static boolean bandera;
        public static SymbolsTable tabla;
        public static void main( String[] args )throws ParseException, Exception
        {
                try
                {
                        Scanner sc = new Scanner(System.in);
                        System.out.println("Presione 1 para analisis lexico, 2 para analisis sintactico: ");
                        int n = sc.nextInt();
                        if(n == 1){
                        System.out.println("Selecciono Analisis Lexico");
                        lexico analizador = new lexico( System.in ) ;
                        analizador.iniciarAnalisisLexico();
                        }
                        else if(n == 2){
                        System.out.println("Selecciono Analisis Sintactico");
                        lexico analizador = new lexico( System.in ) ;
                        SimpleNode nodo = analizador.iniciarAnalisisSintactico();
                        nodo.dump("");
                        }
                        System.out.println("Analisis Finalizado Exitosamente");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("Analisis Finalizado Incorrectamente");
                }
        }
        public static boolean matchTypes(int valueID, int value){
                switch(valueID){
                        case INT:
                                return (value == NUMERO || value == INT);
            case FLOAT:
                return (value == NUMERO || value == DECIMAL || value == INT || value == FLOAT);
            case BOOLEAN:
                return (value == TRUE || value == FALSE || value == BOOLEAN);
            case CHAR:
                return (value == CARACTER || value == CHAR);
            case STR:
                return (value == CADENA || value == STR);
            default: return false;
                }
        }

//este metodo inicia el analizador lexico
  static final public void iniciarAnalisisLexico() throws ParseException {
 /*@bgen(jjtree) iniciarAnalisisLexico */
 SimpleNode jjtn000 = new SimpleNode(JJTINICIARANALISISLEXICO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);lexico.bandera = true;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIN:
        case CONSTANTE:
        case INPUT:
        case PRINT:
        case IF:
        case ELSE:
        case WHILE:
        case DO:
        case FOR:
        case OR:
        case AND:
        case NOT:
        case TRUE:
        case FALSE:
        case ASIGNACION:
        case RESTA:
        case SUMA:
        case MULTIPLICACION:
        case DIVISION:
        case MENOR:
        case MAYOR:
        case MENORIGUAL:
        case MAYORIGUAL:
        case IGUAL:
        case DIFERENTE:
        case PARENTA:
        case PARENTC:
        case LLAVEA:
        case LLAVEC:
        case COMA:
        case PUNTO:
        case PCOMA:
        case DCOMA:
        case SCOMA:
        case DCORCHETE:
        case SCORCHETE:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case STR:
        case NUMERO:
        case DECIMAL:
        case CADENA:
        case CARACTER:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIN:
          jj_consume_token(MAIN);
          break;
        case CONSTANTE:
          jj_consume_token(CONSTANTE);
          break;
        case INPUT:
          jj_consume_token(INPUT);
          break;
        case PRINT:
          jj_consume_token(PRINT);
          break;
        case IF:
          jj_consume_token(IF);
          break;
        case ELSE:
          jj_consume_token(ELSE);
          break;
        case WHILE:
          jj_consume_token(WHILE);
          break;
        case DO:
          jj_consume_token(DO);
          break;
        case FOR:
          jj_consume_token(FOR);
          break;
        case OR:
          jj_consume_token(OR);
          break;
        case AND:
          jj_consume_token(AND);
          break;
        case NOT:
          jj_consume_token(NOT);
          break;
        case TRUE:
          jj_consume_token(TRUE);
          break;
        case FALSE:
          jj_consume_token(FALSE);
          break;
        case ASIGNACION:
          jj_consume_token(ASIGNACION);
          break;
        case RESTA:
          jj_consume_token(RESTA);
          break;
        case SUMA:
          jj_consume_token(SUMA);
          break;
        case MULTIPLICACION:
          jj_consume_token(MULTIPLICACION);
          break;
        case DIVISION:
          jj_consume_token(DIVISION);
          break;
        case MENOR:
          jj_consume_token(MENOR);
          break;
        case MAYOR:
          jj_consume_token(MAYOR);
          break;
        case MAYORIGUAL:
          jj_consume_token(MAYORIGUAL);
          break;
        case MENORIGUAL:
          jj_consume_token(MENORIGUAL);
          break;
        case IGUAL:
          jj_consume_token(IGUAL);
          break;
        case DIFERENTE:
          jj_consume_token(DIFERENTE);
          break;
        case PARENTA:
          jj_consume_token(PARENTA);
          break;
        case PARENTC:
          jj_consume_token(PARENTC);
          break;
        case LLAVEA:
          jj_consume_token(LLAVEA);
          break;
        case LLAVEC:
          jj_consume_token(LLAVEC);
          break;
        case COMA:
          jj_consume_token(COMA);
          break;
        case PUNTO:
          jj_consume_token(PUNTO);
          break;
        case PCOMA:
          jj_consume_token(PCOMA);
          break;
        case DCOMA:
          jj_consume_token(DCOMA);
          break;
        case SCOMA:
          jj_consume_token(SCOMA);
          break;
        case DCORCHETE:
          jj_consume_token(DCORCHETE);
          break;
        case SCORCHETE:
          jj_consume_token(SCORCHETE);
          break;
        case INT:
          jj_consume_token(INT);
          break;
        case FLOAT:
          jj_consume_token(FLOAT);
          break;
        case BOOLEAN:
          jj_consume_token(BOOLEAN);
          break;
        case CHAR:
          jj_consume_token(CHAR);
          break;
        case STR:
          jj_consume_token(STR);
          break;
        case NUMERO:
          jj_consume_token(NUMERO);
          break;
        case DECIMAL:
          jj_consume_token(DECIMAL);
          break;
        case CADENA:
          jj_consume_token(CADENA);
          break;
        case CARACTER:
          jj_consume_token(CARACTER);
          break;
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//este metodo inicia el analisis sintactico
  static final public SimpleNode iniciarAnalisisSintactico() throws ParseException {
 /*@bgen(jjtree) iniciarAnalisisSintactico */
 SimpleNode jjtn000 = new SimpleNode(JJTINICIARANALISISSINTACTICO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);lexico.bandera = false;
    try {
         tabla = new SymbolsTable();
      jj_consume_token(MAIN);
      jj_consume_token(LLAVEA);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANTE:
        case INPUT:
        case PRINT:
        case IF:
        case WHILE:
        case DO:
        case FOR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case STR:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        bloque();
      }
      jj_consume_token(LLAVEC);
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void bloque() throws ParseException {
 /*@bgen(jjtree) bloque */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANTE:
        declaracionConstantes();
        break;
      case INT:
      case FLOAT:
      case BOOLEAN:
      case CHAR:
      case STR:
        declaracionVariables();
        break;
      case PRINT:
        impresion();
        break;
      case IDENTIFICADOR:
        asignacion();
        break;
      case INPUT:
        entrada();
        break;
      case IF:
        decisionIF();
        break;
      case WHILE:
        cicloWhile();
        break;
      case DO:
        cicloDoWhile();
        break;
      case FOR:
        cicloFor();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//BLOQUE DE SENTENCIAS
  static final public void declaracionConstantes() throws ParseException {
 /*@bgen(jjtree) declaracionConstantes */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARACIONCONSTANTES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Symbol s;
Token a;
Token v;
int kind;
    try {
      jj_consume_token(CONSTANTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        a = tipoInteger();
        break;
      case FLOAT:
        a = tipoFloat();
        break;
      case BOOLEAN:
        a = tipoBoolean();
        break;
      case CHAR:
        a = tipoCharacter();
        break;
      case STR:
        a = tipoString();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                     kind = a.kind;
      a = identificador();
      jj_consume_token(ASIGNACION);
      v = valorAsignacion();
                if(!matchTypes(kind, v.kind)){
                {if (true) throw new SemanticException("El valor no es admitido: " + v.image);}
                }
                                if(!tabla.contains(a.image)){
                                        s = new Symbol(kind, a.image);
                                        tabla.insert(a.image, s);
                                        }else{
                                                {if (true) throw new SemanticException("La constante " + a.image + " ya ha sido declarada");}
                                                }
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void declaracionVariables() throws ParseException {
 /*@bgen(jjtree) declaracionVariables */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARACIONVARIABLES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token a; Token v; int kind; Symbol s; int hasIndex = 0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        a = tipoInteger();
        break;
      case FLOAT:
        a = tipoFloat();
        break;
      case BOOLEAN:
        a = tipoBoolean();
        break;
      case CHAR:
        a = tipoCharacter();
        break;
      case STR:
        a = tipoString();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                          kind = a.kind;
      a = identificador();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
      case DCORCHETE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DCORCHETE:
          hasIndex = arreglo();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASIGNACION:
            jj_consume_token(ASIGNACION);
            jj_consume_token(LLAVEA);
            v = valorAsignacion();
                        if(!matchTypes(kind, v.kind)){
                                {if (true) throw new SemanticException("El valor no es admitido: " + v.image);}
                                }
            label_3:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMA:
                ;
                break;
              default:
                jj_la1[6] = jj_gen;
                break label_3;
              }
              jj_consume_token(COMA);
              v = valorAsignacion();
                        if(!matchTypes(kind, v.kind)){
                                {if (true) throw new SemanticException("El valor no es admitido: " + v.image);}
                                }
            }
            jj_consume_token(LLAVEC);

            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          break;
        case ASIGNACION:
          jj_consume_token(ASIGNACION);
          v = valorAsignacion();
                                                              if(!matchTypes(kind, v.kind)){
                                {if (true) throw new SemanticException("El valor no es admitido: " + v.image);}
                                }
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
                                if(!tabla.contains(a.image)){
                                        s = new Symbol(kind, a.image);
                                        s.setSize(hasIndex);
                                        tabla.insert(a.image, s);
                                }else{
                                        {if (true) throw new SemanticException("La variable " + a.image + " ya ha sido declarada");}
                                }
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public Token valorAsignacion() throws ParseException {
 /*@bgen(jjtree) valorAsignacion */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORASIGNACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token m;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CARACTER:
        m = valorCaracter();
        break;
      case FALSE:
        m = valorFalse();
        break;
      case TRUE:
        m = valorTrue();
        break;
      case CADENA:
        m = valorCadena();
        break;
      case RESTA:
      case NUMERO:
      case DECIMAL:
      case IDENTIFICADOR:
        m = operacion();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                jjtc000 = false;
                                                                                               {if (true) return m;}
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operacion() throws ParseException {
 /*@bgen(jjtree) operacion */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; boolean isFloat = false; int index = -1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        t = identificador();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DCORCHETE:
          index = arreglo();
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
                if(tabla.contains(t.image)){
                        if(index == 1){
                                if(!(tabla.search(t.image).getSize() == 1)){
                                        {if (true) throw new SemanticException("No se encuentra: " + t.image + "[]");}
                                }
                        }
                        t.kind = tabla.search(t.image).getType(); //Hay que asignarlo en esta primera parte, sino puede que t.kind == IDENTIFICADOR (no nos es util)
                        if(t.kind == FLOAT|| t.kind == INT) {
                                if(tabla.search(t.image).getType() == FLOAT){
                                        isFloat = true;
                                }
                        }
                        else{
                                t.kind = tabla.search(t.image).getType();
                                {if (true) return t;}
                        }
                }else{
                        {if (true) throw new SemanticException("La variable : " + t.image + " no existe");}
                }
        break;
      case RESTA:
      case NUMERO:
      case DECIMAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESTA:
          jj_consume_token(RESTA);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERO:
          t = valorNumeroEntero();
          break;
        case DECIMAL:
          t = valorNumeroDecimal();
                                                                                                        isFloat = true;
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESTA:
        case SUMA:
        case MULTIPLICACION:
        case DIVISION:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUMA:
          operadorSumar();
          break;
        case RESTA:
          operadorRestar();
          break;
        case MULTIPLICACION:
          operadorMultiplicar();
          break;
        case DIVISION:
          operadorDividir();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          t = identificador();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DCORCHETE:
            arreglo();
            break;
          default:
            jj_la1[17] = jj_gen;
            ;
          }
                        if(tabla.contains(t.image)){
                                if(index == 1){
                                if(!(tabla.search(t.image).getSize() == 1)){
                                        {if (true) throw new SemanticException("No se encuentra: " + t.image + "[]");}
                                }
                        }
                                if(tabla.search(t.image).getType() == FLOAT||tabla.search(t.image).getType() == INT) {
                                        if(tabla.search(t.image).getType() == FLOAT){
                                                isFloat = true;
                                        }
                                }else{
                                        //t.kind = tabla.search(t.image).getType(); return t; 
                                        //Hay que mandar error ya que significa que no es del tipo adecuado y ya estamos en una operación aritmética
                                        {if (true) throw new SemanticException("No es posible realizar operaciones con esta variable "+t.image);}
                                }
                        }else{
                                {if (true) throw new SemanticException("La variable : " + t.image + " no existe");}
                        }
          break;
        case RESTA:
        case NUMERO:
        case DECIMAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RESTA:
            jj_consume_token(RESTA);
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUMERO:
            t = valorNumeroEntero();
            break;
          case DECIMAL:
            t = valorNumeroDecimal();
                                                                                                        isFloat = true;
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                        if(isFloat){
                                t.kind = FLOAT;
                        }else{
                                t.kind = INT;
                        }
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 {if (true) return t;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public int arreglo() throws ParseException {
 /*@bgen(jjtree) arreglo */
 SimpleNode jjtn000 = new SimpleNode(JJTARREGLO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);int in = 0;
    try {
      jj_consume_token(DCORCHETE);
      in = indice();
      jj_consume_token(SCORCHETE);
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                          {if (true) return in;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public int indice() throws ParseException {
 /*@bgen(jjtree) indice */
 SimpleNode jjtn000 = new SimpleNode(JJTINDICE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; int indice;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        t = valorNumeroEntero();
                                       indice = Integer.parseInt(t.image);
        break;
      case IDENTIFICADOR:
        t = identificador();
                        if(tabla.contains(t.image)){
                                if(tabla.search(t.image).getType() == INT){
                                        indice = 1;
                                }else{
                                        {if (true) throw new SemanticException("Valor de indice incorrecto: " + t.image);}
                                }
                        }else{
                                {if (true) throw new SemanticException("La variable : " + t.image + " no existe");}
                        }
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESTA:
        case SUMA:
        case MULTIPLICACION:
        case DIVISION:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLICACION:
          operadorMultiplicar();
          break;
        case DIVISION:
          operadorDividir();
          break;
        case SUMA:
          t = operadorSumar();
          break;
        case RESTA:
          t = operadorRestar();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERO:
          t = valorNumeroEntero();
          break;
        case IDENTIFICADOR:
          t = identificador();
                        if(tabla.contains(t.image)){
                                if(tabla.search(t.image).getType() == INT){
                                        indice = 1;
                        }else{
                                        {if (true) throw new SemanticException("Valor de indice incorrecto: " + t.image);}
                                }
                        }else{
                                {if (true) throw new SemanticException("La variable : " + t.image + " no existe");}
                        }
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     if(indice > 0){
                        {if (true) return indice;}
                }else{
                        {if (true) throw new SemanticException("Valor de indice incorrecto: " + indice);}
                }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

/* PALABRAS RESERVADAS PARA LOS TIPOS DE DATOS ACEPTABLES POR EL LENGUAJE*/
  static final public Token tipoInteger() throws ParseException {
 /*@bgen(jjtree) tipoInteger */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INT);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token tipoFloat() throws ParseException {
 /*@bgen(jjtree) tipoFloat */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOFLOAT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOAT);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token tipoBoolean() throws ParseException {
 /*@bgen(jjtree) tipoBoolean */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOBOOLEAN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BOOLEAN);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token tipoCharacter() throws ParseException {
 /*@bgen(jjtree) tipoCharacter */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOCHARACTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CHAR);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token tipoString() throws ParseException {
 /*@bgen(jjtree) tipoString */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STR);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

/* VALORES ACEPTADOS POR EL LENGUAJE PARA LOS TIPOS DE DATOS ESTABLECIDOS*/
  static final public Token valorNumeroEntero() throws ParseException {
 /*@bgen(jjtree) valorNumeroEntero */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORNUMEROENTERO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMERO);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token valorNumeroDecimal() throws ParseException {
 /*@bgen(jjtree) valorNumeroDecimal */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORNUMERODECIMAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DECIMAL);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token valorCaracter() throws ParseException {
 /*@bgen(jjtree) valorCaracter */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORCARACTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CARACTER);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token valorTrue() throws ParseException {
 /*@bgen(jjtree) valorTrue */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORTRUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(TRUE);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token valorFalse() throws ParseException {
 /*@bgen(jjtree) valorFalse */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORFALSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FALSE);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token valorCadena() throws ParseException {
 /*@bgen(jjtree) valorCadena */
 SimpleNode jjtn000 = new SimpleNode(JJTVALORCADENA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CADENA);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token identificador() throws ParseException {
 /*@bgen(jjtree) identificador */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFICADOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFICADOR);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void impresion() throws ParseException {
 /*@bgen(jjtree) impresion */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPRESION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
      valorAsignacion();
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void asignacion() throws ParseException {
 /*@bgen(jjtree) asignacion */
 SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; int kind;int i;
    try {
      t = identificador();
                if(tabla.contains(t.image)){
                kind = tabla.search(t.image).getType();
                } else{
                        {if (true) throw new SemanticException("La variable : " + t.image + " no existe");}
                        }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DCORCHETE:
        i = arreglo();
                                if(i == 1){
                                        if(!(tabla.search(t.image).getSize() == 1)){
                                                {if (true) throw new SemanticException("No se encuentra: " + t.image + "[]");}
                                        }
                                }
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(ASIGNACION);
      t = valorAsignacion();
                                        if(!matchTypes(kind, t.kind)){
                                                {if (true) throw new SemanticException("El valor no es admitido: " + t.image);}
                                                }
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void entrada() throws ParseException {
 /*@bgen(jjtree) entrada */
 SimpleNode jjtn000 = new SimpleNode(JJTENTRADA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; int index = -1;
    try {
      jj_consume_token(INPUT);
      jj_consume_token(PARENTA);
      t = identificador();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DCORCHETE:
        index = arreglo();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
                if(tabla.contains(t.image)){
                        if(index == 1){
                                if(!(tabla.search(t.image).getSize() == 1)){
                                        if(!(index < tabla.search(t.image).getSize())){
                                                {if (true) throw new SemanticException("No se encuentra: " + t.image + "[]");}
                                        }
                                }
                        }
                }
                else{
                        {if (true) throw new SemanticException("La variable : " + t.image + " no existe");}
                }
      jj_consume_token(PARENTC);
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/* OPERADORES ARITMETICOS*/
  static final public Token operadorMultiplicar() throws ParseException {
 /*@bgen(jjtree) operadorMultiplicar */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMULTIPLICAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MULTIPLICACION);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorDividir() throws ParseException {
 /*@bgen(jjtree) operadorDividir */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORDIVIDIR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DIVISION);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorSumar() throws ParseException {
 /*@bgen(jjtree) operadorSumar */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORSUMAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SUMA);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorRestar() throws ParseException {
 /*@bgen(jjtree) operadorRestar */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORRESTAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RESTA);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

/*OPERADORES RELACIONALES*/
  static final public Token operadorMenor() throws ParseException {
 /*@bgen(jjtree) Menor */
 SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MENOR);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorMayor() throws ParseException {
 /*@bgen(jjtree) Mayor */
 SimpleNode jjtn000 = new SimpleNode(JJTMAYOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MAYOR);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorIgual() throws ParseException {
 /*@bgen(jjtree) Igual */
 SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IGUAL);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorMenorIgual() throws ParseException {
 /*@bgen(jjtree) MenorIgual */
 SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MENORIGUAL);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorMayorIgual() throws ParseException {
 /*@bgen(jjtree) MayorIgual */
 SimpleNode jjtn000 = new SimpleNode(JJTMAYORIGUAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MAYORIGUAL);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Token operadorDiferente() throws ParseException {
 /*@bgen(jjtree) Diferente */
 SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DIFERENTE);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               {if (true) return t;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

//BLOQUE DE DECISIONES
  static final public void decisionIF() throws ParseException {
 /*@bgen(jjtree) decisionIF */
  SimpleNode jjtn000 = new SimpleNode(JJTDECISIONIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(PARENTA);
      expresionLogica();
      jj_consume_token(PARENTC);
      jj_consume_token(LLAVEA);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANTE:
        case INPUT:
        case PRINT:
        case IF:
        case WHILE:
        case DO:
        case FOR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case STR:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_6;
        }
        bloque();
      }
      jj_consume_token(LLAVEC);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        decisionELSE();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void decisionELSE() throws ParseException {
 /*@bgen(jjtree) decisionELSE */
  SimpleNode jjtn000 = new SimpleNode(JJTDECISIONELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
      jj_consume_token(LLAVEA);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANTE:
        case INPUT:
        case PRINT:
        case IF:
        case WHILE:
        case DO:
        case FOR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case STR:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_7;
        }
        bloque();
      }
      jj_consume_token(LLAVEC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Inicio expresionLogica
  static final public void expresionLogica() throws ParseException {
 /*@bgen(jjtree) expresionLogica */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESIONLOGICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expresionSimple();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
        case AND:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          jj_consume_token(OR);
          break;
        case AND:
          jj_consume_token(AND);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        expresionSimple();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void expresionSimple() throws ParseException {
 /*@bgen(jjtree) expresionSimple */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESIONSIMPLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t1; Token t2; Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESTA:
      case NUMERO:
      case DECIMAL:
      case IDENTIFICADOR:
        t1 = operacion();
        break;
      case CARACTER:
        t1 = valorCaracter();
        break;
      case FALSE:
        t1 = valorFalse();
        break;
      case TRUE:
        t1 = valorTrue();
        break;
      case CADENA:
        t1 = valorCadena();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
        op = operadorMenor();
        break;
      case MAYOR:
        op = operadorMayor();
        break;
      case IGUAL:
        op = operadorIgual();
        break;
      case MAYORIGUAL:
        op = operadorMayorIgual();
        break;
      case MENORIGUAL:
        op = operadorMenorIgual();
        break;
      case DIFERENTE:
        op = operadorDiferente();
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESTA:
      case NUMERO:
      case DECIMAL:
      case IDENTIFICADOR:
        t2 = operacion();
        break;
      case CARACTER:
        t2 = valorCaracter();
        break;
      case FALSE:
        t2 = valorFalse();
        break;
      case TRUE:
        t2 = valorTrue();
        break;
      case CADENA:
        t2 = valorCadena();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void expresionBoolean() throws ParseException {
 /*@bgen(jjtree) expresionBoolean */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESIONBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NOT);
      jj_consume_token(PARENTA);
      expresionLogica();
      jj_consume_token(PARENTC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Fin expresionLogica
  static final public void operadorOR() throws ParseException {
 /*@bgen(jjtree) operadorOR */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOROR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OR);
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void operadorAND() throws ParseException {
 /*@bgen(jjtree) operadorAND */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADORAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(AND);
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

//BLOQUE DE CICLOS
  static final public void cicloDoWhile() throws ParseException {
 /*@bgen(jjtree) cicloDoWhile */
  SimpleNode jjtn000 = new SimpleNode(JJTCICLODOWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      jj_consume_token(LLAVEA);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANTE:
        case INPUT:
        case PRINT:
        case IF:
        case WHILE:
        case DO:
        case FOR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case STR:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_9;
        }
        bloque();
      }
      jj_consume_token(LLAVEC);
      jj_consume_token(WHILE);
      jj_consume_token(PARENTA);
      expresionLogica();
      jj_consume_token(PARENTC);
      jj_consume_token(PCOMA);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void cicloWhile() throws ParseException {
 /*@bgen(jjtree) cicloWhile */
  SimpleNode jjtn000 = new SimpleNode(JJTCICLOWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(PARENTA);
      expresionLogica();
      jj_consume_token(PARENTC);
      jj_consume_token(LLAVEA);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANTE:
        case INPUT:
        case PRINT:
        case IF:
        case WHILE:
        case DO:
        case FOR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case STR:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_10;
        }
        bloque();
      }
      jj_consume_token(LLAVEC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void cicloFor() throws ParseException {
 /*@bgen(jjtree) cicloFor */
  SimpleNode jjtn000 = new SimpleNode(JJTCICLOFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(PARENTA);
      inicializacion();
      jj_consume_token(PCOMA);
      expresionLogica();
      jj_consume_token(PCOMA);
      incrementos();
      jj_consume_token(PARENTC);
      jj_consume_token(LLAVEA);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANTE:
        case INPUT:
        case PRINT:
        case IF:
        case WHILE:
        case DO:
        case FOR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case STR:
        case IDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_11;
        }
        bloque();
      }
      jj_consume_token(LLAVEC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/*void inicializacion() #Inicializacion:
{}
	{
		[tipoInteger()|tipoFloat()|tipoBoolean()|tipoCharacter()|tipoString()]variable()((<COMA>variable())*)
	}*/
  static final public void inicializacion() throws ParseException {
 /*@bgen(jjtree) inicializacion */
 SimpleNode jjtn000 = new SimpleNode(JJTINICIALIZACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token a; Token v; int kind; Symbol s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        a = tipoInteger();
        break;
      case FLOAT:
        a = tipoFloat();
        break;
      case BOOLEAN:
        a = tipoBoolean();
        break;
      case CHAR:
        a = tipoCharacter();
        break;
      case STR:
        a = tipoString();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                         kind = a.kind;
      a = identificador();
                if(!tabla.contains(a.image)){
                        s = new Symbol(kind, a.image); //adaptado a la nueva clase SymbolsTable
                        tabla.insert(a.image, s);
                }else{
                        {if (true) throw new SemanticException("La constante " + a.image + " ya ha sido declarada");}
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIGNACION:
        jj_consume_token(ASIGNACION);
        v = valorAsignacion();
                if(!matchTypes(kind, v.kind)){
                        {if (true) throw new SemanticException("El valor no es admitido: " + v.image);}
                }
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void variable() throws ParseException {
 /*@bgen(jjtree) variable */
 SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      t1 = identificador();
                        if(tabla.contains(t1.image)){
                                t1.kind = tabla.search(t1.image).getType();
                        }else{
                                {if (true) throw new SemanticException("La variable : " + t1.image + " no existe");}
                        }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DCORCHETE:
        arreglo();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jj_consume_token(ASIGNACION);
      t2 = valorAsignacion();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        if(!matchTypes(t1.kind, t2.kind)){
                                {if (true) throw new SemanticException("El valor no es admitido: " + t1.image+ " un "+t2.image);}
                        }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void incrementos() throws ParseException {
 /*@bgen(jjtree) incrementos */
  SimpleNode jjtn000 = new SimpleNode(JJTINCREMENTOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      variable();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMA);
        variable();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public lexicoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[42];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffffe,0xfffffffe,0x3bc,0x3bc,0x0,0x0,0x40000000,0x8000,0x8000,0x8000,0x16000,0x0,0x10000,0x0,0x10000,0xf0000,0xf0000,0x0,0x10000,0x0,0x10000,0x0,0xf0000,0xf0000,0x0,0x0,0x0,0x3bc,0x40,0x3bc,0xc00,0xc00,0x16000,0x3f00000,0x16000,0x3bc,0x3bc,0x3bc,0x0,0x8000,0x0,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7fff,0x7fff,0x43e0,0x43e0,0x3e0,0x3e0,0x0,0x0,0x8,0x8,0x7c00,0x8,0x0,0xc00,0x4c00,0x0,0x0,0x8,0x0,0xc00,0x4c00,0x4400,0x0,0x0,0x4400,0x8,0x8,0x43e0,0x0,0x43e0,0x0,0x0,0x7c00,0x0,0x7c00,0x43e0,0x43e0,0x43e0,0x3e0,0x0,0x8,0x0,};
   }

  /** Constructor with InputStream. */
  public lexico(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public lexico(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new lexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public lexico(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new lexicoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public lexico(lexicoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(lexicoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 42; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 42; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
