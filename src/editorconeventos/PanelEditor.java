package editorconeventos;

import analizador.ParseException;
import analizador.SemanticException;
import analizador.TokenMgrError;
import analizador.lexico;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import javax.swing.*;

/**
 *
 * @author Arturo
 */
public class PanelEditor extends javax.swing.JPanel { //Otra forma de implementar los eventos
    private lexico lex;
    private boolean claseIniciada = false;
    private final TextLineNumber numerador;

    /**
     * Creates new form PanelEditor
     */
    public PanelEditor() {
        initComponents();
        numerador = new TextLineNumber(areaTexto);
        scroll.setRowHeaderView(numerador);
    }

    public JSplitPane getSP() {
        return jSplitPane1;
    }
    
    public void addEventos(OyenteEditor o){
        areaTexto.getDocument().addDocumentListener(o);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        scroll = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();
        scroll2 = new javax.swing.JScrollPane();
        areaConsola = new javax.swing.JTextArea();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(390);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setLastDividerLocation(390);

        scroll.setBackground(getBackground());
        scroll.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        areaTexto.setColumns(20);
        areaTexto.setRows(5);
        scroll.setViewportView(areaTexto);

        jSplitPane1.setLeftComponent(scroll);

        scroll2.setBorder(javax.swing.BorderFactory.createTitledBorder("Salida de consola"));

        areaConsola.setEditable(false);
        areaConsola.setColumns(20);
        areaConsola.setRows(5);
        scroll2.setViewportView(areaConsola);

        jSplitPane1.setRightComponent(scroll2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaConsola;
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JScrollPane scroll2;
    // End of variables declaration//GEN-END:variables

    public void analisisLexico() {
        String in = areaTexto.getText();
        try {
            System.out.println("-Análisis léxico iniciado-");
            InputStream ini = new ByteArrayInputStream(in.getBytes(StandardCharsets.UTF_8));
            if (claseIniciada) {
                lexico.ReInit(ini);
                lexico.iniciarAnalisisLexico();
            } else {
                claseIniciada = true;
                lex = new lexico(ini);
                lexico.iniciarAnalisisLexico();

            }
            JOptionPane.showMessageDialog(this, "Analisis léxico terminado");
            System.out.println("-Analisis léxico terminado sin errores-");
        } catch (TokenMgrError | ParseException ex) {
            moverCursor(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("-Análisis léxico terminado con errores-");
        }

    }

    public void analisisSintactico() {
        String in = areaTexto.getText();
        try {
            System.out.println("-Análisis sintáctico - semántico iniciado-");
            InputStream ini = new ByteArrayInputStream(in.getBytes(StandardCharsets.UTF_8));
            if (claseIniciada) {
                lexico.ReInit(ini);
                lexico.iniciarAnalisisSintactico();
            } else {
                claseIniciada = true;
                lex = new lexico(ini);
                lexico.iniciarAnalisisSintactico();

            }
            JOptionPane.showMessageDialog(this, "Analisis sintáctico - semántico terminado");
            System.out.println("-Analisis sintáctico - semántico terminado sin errores-");
        } catch (TokenMgrError | ParseException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            moverCursor(ex.getMessage());
            System.out.println("-Análisis sintáctico - semántico terminado con errores-");
        }
        catch(SemanticException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("-Análisis sintáctico - semántico terminado con errores-");
        }
    }

    private void moverCursor(String mensaje) {
        String[] tokens = mensaje.split(" ");
        int fila = -1, columna = -1;
        for (int i = 0; i < tokens.length; i++) {
            if (tokens[i].equals("line")) {
                fila = 0;
                for (int j = 0; j < tokens[i + 1].length(); j++) {
                    if (Character.isDigit(tokens[i + 1].charAt(j))) {
                        fila *= 10;
                        fila += (tokens[i + 1].charAt(j) - '0');
                    } else {
                        break;
                    }
                }
                //fila = Integer.parseInt(tokens[i+1].trim());

            } else if (tokens[i].equals("column")) {
                columna = 0;
                for (int j = 0; j < tokens[i + 1].length(); j++) {
                    if (Character.isDigit(tokens[i + 1].charAt(j))) {
                        columna *= 10;
                        columna += (tokens[i + 1].charAt(j) - '0');
                    } else {
                        break;
                    }
                }
            }
        }
        try {
            areaTexto.setCaretPosition(areaTexto.getLineStartOffset(fila - 1) + columna - 1);
        } catch (Exception ex) {
        }
    }

    public void limpiarPantalla() {
        this.areaTexto.setText("");
        this.areaConsola.setText("");
    }

    /**
     * @return the areaTexto
     */
    public javax.swing.JTextArea getAreaTexto() {
        return areaTexto;
    }

    public JTextArea getAreaConsola() {
        return areaConsola;
    }

    /**
     * @param areaTexto the areaTexto to set
     */
    public void setAreaTexto(javax.swing.JTextArea areaTexto) {
        this.areaTexto = areaTexto;
    }
}
